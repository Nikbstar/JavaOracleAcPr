package ru.nik66.practices.practice3;
/**
    1. Парктическое занятие Generics
    Написать прототип заказа билетов кинотеатраб по условию:
 а) В системе существует множество пользователей, которые могут заказывать билеты на сеансы.
 б) В системе существует множество кинофильмов, транслируемых в залах во время сеансов.
 в) в каждом зале может быть различная структура мест.
 г) пользователи могут обладать разными правами (админ - управляет кинотеатром, юзер -
 просматривает расписание сеансов и заказывает билеты).
 д) билеты содержат информацию об Кинофильме, сеансе, пользователе, месте.

    2. Создать классы с полями:
 Продумать и создать классы для реализации приведенных выше требований.

    3. Создать прототип базы данных в памяти (in memory)
 Предоставить инерфейс и его реализацию для сущностей из пункта 2, при этом соблюдая все
 условия спецификации пунктов а-д. Данный интерфейс должен содержать все CRUD операции
 работающие с "in memory data base". В качестве "in memory data base" использовать Generic
 хранилища данных (GenericStorage<K, V>). Элементы хранить в массиве или List. Должно быть
 реализовано CRUD (create read update delete - "создание чтение обновление удаление")
 операций.

 Комментарий 1:
    Задание про generic'и это третий пункт.
 Здесь вам надо будет сделать свой прототип in memory db, класс которой будет реализацией
 класса GenericStorage, т.е. нужно будет сделать интерфейс, параметризированный, реализация
 которого умеет хранить пары ключ-значение в List'е (написать что то вроде своей Map'ы
 упрощенной).
    В конце курса нужно будет написать веб приложение, позволяющее пользователям через веб
 интерфейс посмотреть кинофильмы, транслирующиеся в вашем кинотеатре, информацию об этих
 кинофильмах, время в которое они идуюут, в каких залах и возможность заказать билет. Для
 того чтобы посмотреть список фильмов авторизированным быть не надо, для того, чтобы
 произвести заказ билета нужно быть авторизированным.

    Следовательно в начале вы должны определиться с пользовательским интерфейсам вашей
 системы. Так как приложение будет пользовательское, для того чтобы определиться с
 сущностями, которые будут в вашем приложении (какие объекты, классы) вам надо будет
 определиться с пользовательским интерфейссом. Вы должны понять как вы хотите эту информацию
 отображать пользователю. Если вы сейчас продумаете структуру классов, структуру базы данных
 а только поотом начнете продумывать графический интерфейс пользователя, то может получиться
 так, что вам не очень удобно будет работать с вашей базой данных на тех экранах, которые
 вы придумаете в будущем, и придется либо графический интерфейс подстраивать под базу данных
 (что не правильно, т.к. интерфейс, в первую очередь, должен быть удобен пользователю), либо
 что то придется переделывать в базе данных и объектах. Поэтому в начале необходимо сделать
 Mockup'ы будущего графического интерфейса. Mockup - это схематически-графический (без
 дизайна) будущий интерфейс ваших вебстраниц. Отображаются все структурные элементы:
 кнопочки, выпадающие списки, картинки, диалоговые окошки и т.п. Потом дизайнеры это всё
 разукрашивают. Продумывается первая страница (что будет на ней), потом если пользователь
 кликнул на какую то кнопочку (вторая страница). Мокапы покажут на какой странице какими
 объектами необходимо оперировать. Когда вы поймете какие должны быть объекты, вы поймете
 какая база данных должна это всё хранить (базу данных будем продумывать позже).
    Сейчас мы делаем объектное хранилище с парой ключ-значение (например ключем будет id,
 в качестве значения сам объект). Делаете свой GenericStorage, в котором могут храниться
 объекты, к которым вы сможете обращаться по каким то ключам (id), как таблица в базе
 данных. Один сторедж для фильмов, другой для залов, третий для юзеров...

    После того как вы определитесь с мокапами, нужно будет определиться с классами,
 продумать и создать классы. Будут классы: Move, Hall, Ticket, Session, User, Role, Place.
 Места могут быть как объекты, а могут и не быть (просто номер места). Нужно определиться,
 какие у этих классов будут поля и как эти классы будут между собой связаны. Например
 Ticket хранит информацию о User'е, который его купил и о сеансе. Сеанс хранит информацию о
 фильме, который в нем показывается, о времени и о Hall'е. Hall хранит лист сеансов. И т.д.

    После этого вам надо будет создать интерфейс GenericStorage, который реализует CRUD.
 Т.е. в вашем GenericStorage'е должны быть минимум 4 метода: create read update delete.
 Т.к. у нас GenericStorage, скорей всего будет какой то внутренний класс Node, в котором
 будет хранится пара ключ-значение (Типа <K, V>), а методы CRUD будут значения этого Node
 из листа доставать. У нас будет интерфейс GenericStorage типизированный вумя типами данных
 в GenericStorage'е будет вложенный класс Node типа K и V, в котором будет наш Key и Value,
 будет List Node'ов, и будет 4 абстрактных метода CRUD. Получается что надо будет написать
 реализацию GenericStorage'а, которая позволит вам из этой реализации доставать объекты
 по ключу. В качестве ключа использовать int.

 Комментарий 2:
    Вам сказали продумать веб приложение, с чего вы начнете?
 На фундаменталс мы с вами говорили о жизненном цикле приложения. Всегда первый этап это
 анализ. Вы должны подумать что вы хотите написать? что вы планируете получить на выходе? Не
 каждый заказчик даст вам готовое ТЗ (больше чем в 50% заказчик не знает до конца чего он
 хочет, есть "бизнес" и есть "теника" и "бизнес" часто не понимает, что некоторые вещи очень
 тяжело реализовать, что некоторые вещи стоят очень дорого). Вы должны для себя понять идею,
 потом сделать структурную схему сайта и продумать бизнеспроцесс (человек загружает ваше
 приложение, что он видит? куда он может кликнуть? куда он перейдет? что увидит там?),
 продумать поведенческую диаграмму клиента (сценарий развити событий поведения пользователя
 или администратора). После этого сложется представление сколько будет ссылок, кнопок,
 картинок и т.д. Дальше дизайнерские вопросы, как это сделать красиво, как разместить чтобы
 оно там шевелилось, дергалось и танцевало. Потом вы должны определиться, с какими объектами
 ваша штучка должна работать. Т.е. если открылась страничка, что там видит пользователь?
 Пользователь видит список фильмов, слеовательно у вас где то должен лис объектов типа фильм
 который проецируется на экран. Открывается страничка, которая шлет запрос на бэкенд (на
 сервер). Сервер получая запрос (запрос можно отправлять по ресту, либо Java средствами, на
 Java можно реализовать и вьюшную часть и контролерскую часть и модель, т.е. есть такое
 понятие модель вью-контроллер (model view-controller схема). Либо при нажатии кнопочки
 дёрнется какой то ваш контроллер либо рест запрос пришел). Разница не большая, вам нужен
 лист фильмов, с вашей вьюшной части просят список фильмов. Этот список фильмов потом будет
 преобразован в html, JSon и т.д. это не важно, главное чтоб вы понимали, что на этой
 страничке нужен лист фильмов, на этой страничке нужен лист юзеров, здесь нужен юзер, здесь
 нужны рали и когда вы поймете всё, чем будет оперировать ваш фронтенд, вы поймете какие у
 вас должны быть объекты, как эти объекты между собой должны быть свзаны, т.е. вы продумаете
 модель данных, и потом под эту модель данных вы сможете сделать базу данных и в ней хранить
 эту модель. Т.е. сначала вы продумываете интерфейс пользовательский, потом вы продумываете
 данные, потом вы под эти данные продумываете вашу memory db (база данных в оперативке,
 стартануло приложение, база данных либо предопределенное, либо пустая (удобно для тестов),
 потом будет реальная база данных и между ними можно будет переключаться). Вы должны
 определиться с интерфейсом, вы должны определиться какие классы у вас будут, под эти классы
 вы должны будите создать хранилища, в которых вы будите и их хранить, у вас будут CRUD
 операции, которые будут доставать эти данные.
 */