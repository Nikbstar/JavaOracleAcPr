package ru.nik66.practices.practice1;
/**
 Практическое занятие 1
 Unit Testing
 1. Установка JUnit. Одиночные тесты
    Установите JUnit на локальный компьютер. Проверьте установку JUnit.
    Спроектируйте класс суммирования элементов массива ArraySum, содержащий статический метод sum(),
        принимающий массив в качестве параметра.
    Разработайте класс ArraySumTest для тестирования ArraySum.
    Реализуйте класс ArraySum. Добейтесь корректного выполнения тестов.

 2. JUnit: тесты над общими наборами объектов (fixtures)
    Расширьте класс ArraySum, запланировав в нем конструктор и метод экземпляра sum(), суммирующий массив,
        заданный в конструкторе.
    Расширьте класс ArraySumTest, превратив его в fixture (тест, использующий общий набор объектов).
        В качестве общего объекта должен выступать массив для суммирования.
    Реализуйте дополнительную функциональность в классе ArraySum. Добейтесь корректного выполнения тестов.

 3. JUnit: тестирование исключений
    Добавьте в класс ArraySumTest метод, тестирующий поведение класса ArraySum при передаче в его
        статический метод sum() значения null. Оцените результат выполнения теста и добейтесь его
        корректного выполнения.
    Откорректируйте тестирующий метод так, чтобы он ожидал генерации исключения и выдавал ошибку в случае,
        если исключение не возникает. Добейтесь корректного выполнения теста.

 4. JUnit: группы тестов (test suites)
    Добавьте в проект новый класс ArrayProd, реализующий произведение элементов массива и соответствующий
        тестовый класс ArrayProdTest.
    Объедение ArraySumTest и ArrayProdTest в рамках группы тестов AllTests.
    Выполните группу тестов за один раз.

 5. Разработка, снованная на тестах
    Разработайте на основе тестов один из следующих классов.
    Разработайте класс, представляющий студента. Студент характеризуется именем, фамилией, группой и
        набором экзаменов, которые он сдавал. Экзамен характеризуется названием предмета, оценкой студента
        по нему и датой сдачи (год, семестр). Группа характеризуется курсом и факультетом.
    Необходимые операции таковы:
    - добавить ему оценку по экзамену;
    - удалить для него оценку по экзамену;
        - если он такой экзамен не сдавал - сгенерировать исключение;
    - узнать наивысшую оценку среди всех экзфменов по данному предмету;
    - узнать число экзаменов, которые он сдал с указанной оценкой;
    - узнать его средний балл за указанный семестр.

 Комментарий:
 1. Создать класс ArraySum, в нем статический метод sum(), в качестве аргумента у него массив double,
        возвращающий double сумму элементов массива. Написать тест.
 2. К классу ArraySum добавить нестатический метод sum(), поле и конструктор, который получает массив и
        кладет его в поле, а метод использует поле для суммирования. Написать тесты fixture (c @Before),
        перенести массив в поле и перед каждым тестом его переинициализировать.
 3. Поймать тестовым методом exception.
 4. Создать класс ArrayProd, скопировать туда всё из ArraySum и переделать на умножение. Скопипастить
        тесты для него, создать в тестах класс AllTests и выполнить в нем все тесты.
 5. Создать класс Студент с полями имя (стринг), фамилия (стринг), группа (наш ссылочный тип данных) и набор сданных экзаменов (лист экзаменов).
    Создать класс Экзамен с полями название, оценка и дата.
    Создать класс Группа с полями курс и факультет.
    Далее добавляем пустые методы, потом пишем на них тесты и делаем реализацию, чтобы тесты проходили:
    - метод, который получает название предмета (экзамена) и возвращает максимальную оценку по этому предмету.
 */